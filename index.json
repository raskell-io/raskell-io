[{"categories":["foss"],"contents":"   Void Linux as my daily driver  Around six months ago, I decided to ditch my long in the tooth Arch-based setup on my belovest Thinkpad X1 Carbon. I\u0026rsquo;ve been very loyal over the years, and almost came to belive that Arch will be a constant in my adult life. While I kept up with upcoming technologies, I somehow lost track of the ever so diversifying landscape of Linux distributions. It took me a while of constantly coming across a generically named reference to what seemed to be yet another Linux distribution. That outwardly generic sounding name, Void Linux, kept poking my curiosity by supposedly feeling like Arch Linux in the old days, while sharing some substantial DNA with the BSD operating systems. Yet, that\u0026rsquo;s another story I might tell another day, but to remain brief, the BSDs, in particular the infamous OpenBSD with its quite infamous lead developer Theo De Raadt, always were what I considered the endgame. The holy grail of Unix operating systems, so did I think over the decades, FreeBSD, NetBSD and OpenBSD, have always been on my personal radar and I felt I had to earn the intellectual capacity to be able to properly put them at use one day. Last year, when I made the (almost painless) switch from Arch Linux to Void Linux, the simplicity and especially the barebone experience of Void reignited the fascination and the admiration I always had for the BSD operating systems and their philosophy.\nWhile I could write (and definitely will in the near future) about how my journey onto Void Linux and how it has been so far, I preferred to write down, in some like diary, and document every step on how one can approach and ultimately use OpenBSD in 2023. Big disclaimer, I\u0026rsquo;ve yet to install OpenBSD on some baremetal server I ordered some days ago, but dabbled around in the meantime with OS-level virtualization in order to get it running. That\u0026rsquo;s what brings me to libvirt and my surprise to learn that I wouldn\u0026rsquo;t need some full-fledged virtualization solution like the ones offered by VirtualBox or VMWare to efficiently run a virtualized OpenBSD machine.\n   From Void to OpenBSD  Before I tell you more about the history of how things went down, let me give you some basic notions about both Void Linux, being one of many Linux distributions representing them all as it ended up being my distribution of choice, and OpenBSD. As already mentioned earlier, Void Linux and OpenBSD are both Unix-like operating systems, but they feature enough differences to make them noteworthy. Here are a few similarities and differences between the two:\nWhat is similar:\n Both are free and open-source operating systems. Both use a package manager for software management. Void Linux uses XBPS, while OpenBSD uses pkg_add. Both prioritize security and stability in their development and design. Both feature a version control based package repository, meaning that changes in build definition are managed by pull requests from users.  What is different:\n License: Void Linux is licensed under the MIT License, while OpenBSD is licensed under the ISC License. Philosophy: OpenBSD prioritizes security and privacy, while Void Linux prioritizes simplicity and modularity. Package Management: Void Linux uses a binary package manager (XBPS), while OpenBSD uses a source-based package manager (pkg_add). Package Repository: Void Linux has a large and diverse repository, while OpenBSD has a smaller and more curated repository. Init System: Void Linux uses runit as its init system, while OpenBSD uses rc. None uses the infamous systemd init system.     What is OpenBSD in a nutshell  OpenBSD is a free and open-source operating system that focuses on security, standardization, and robustness. It is based on the Berkeley Software Distribution (BSD) Unix operating system and is developed by a global community of volunteers. OpenBSD aims to provide a secure platform for both personal and enterprise use by implementing strong security features, including access control mechanisms, encryption, and auditing.\nTheo de Raadt is the founder and lead developer of OpenBSD. His main objective with OpenBSD is to create a secure operating system that is free from backdoors, vulnerabilities, and other security weaknesses. He is committed to auditing the source code of the operating system and third-party software included with it, to identify and remove any potential security risks. De Raadt is also dedicated to improving the overall quality of the codebase and ensuring compatibility with a wide range of hardware and software.\n   Virtualization with libvirt  libvirt is an open-source virtualization management library that provides a simple and unified API for managing virtualization technologies, including KVM, QEMU, Xen, and others. It aims to simplify the process of creating, managing, and migrating virtual machines, storage, and networks, and to make it easier for administrators to manage virtual environments.\nTo virtualize an operating system ISO like OpenBSD with libvirt, you need to follow these steps:\n Install libvirt and the virtualization technology you want to use, such as KVM. Download the OpenBSD ISO file and place it in a location accessible by libvirt. Create a new virtual machine in libvirt with the OpenBSD ISO as the installation media. This can be done through the command line or using a graphical user interface such as virt-manager. Configure the virtual machine, including the amount of memory, CPU, and disk space, to meet the requirements of OpenBSD. Start the virtual machine and install OpenBSD as you would on a physical machine. Once the installation is complete, you can configure the virtual network, storage, and other settings as required. Finally, you can use the libvirt API or the command line to manage and control the virtual machine, including starting, stopping, migrating, and snapshotting.     Step-by-step guide  Let\u0026rsquo;s first install the libvirt package and some related packages which we need in order to connect via VNC. The VNC will provide us with the possibility to use the graphical interface of the running OpenBSD instance.\n1  $ sudo xbps-install -S dbus qemu libvirt virt-manager virt-viewer tigervnc   Now, we need to add our user, in my case raskell, to the libvirt group which got simultanously created with the installation of libvirt.\n1  $ sudo usermod -aG libvirt raskell   OpenBSD features a release cycle of six months. We would need to update our system every six month to keep up with the latest packages. During a given release, only security and bug fix patches are applied to the curated packages maintained by pkg_add. Therefore, in February 2023, we\u0026rsquo;re using the OpenBSD 7.2 release version. As I\u0026rsquo;m living in Switzerland, I chose to pull the iso image from a Swiss mirror, in this case from mirror.ungleich.ch/pub/OpenBSD (check what mirror is closest to you to get the best download rate).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  # cd /var/lib/libvirt/boot/ # sudo wget https://mirror.ungleich.ch/pub/OpenBSD/7.2/amd64/install72.iso --2023-01-12 20:48:15-- https://mirror.ungleich.ch/pub/OpenBSD/7.2/amd64/install72.iso Resolving mirror.ungleich.ch (mirror.ungleich.ch)... 2a0a:e5c0:2:2:400:c8ff:fe68:bef3, 185.203.114.135 Connecting to mirror.ungleich.ch (mirror.ungleich.ch)|2a0a:e5c0:2:2:400:c8ff:fe68:bef3|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 583352320 (556M) [application/octet-stream] Saving to: ‘install72.iso.1’ install72.iso.1 100%[====================================================================\u0026gt;] 556.33M 7.11MB/s in 77s 2023-01-12 20:49:33 (7.19 MB/s) - ‘install72.iso.1’ saved [583352320/583352320] sudo wget https://mirror.ungleich.ch/pub/OpenBSD/7.2/amd64/SHA256 --2023-01-12 20:47:38-- https://mirror.ungleich.ch/pub/OpenBSD/7.2/amd64/SHA256 Resolving mirror.ungleich.ch (mirror.ungleich.ch)... 2a0a:e5c0:2:2:400:c8ff:fe68:bef3, 185.203.114.135 Connecting to mirror.ungleich.ch (mirror.ungleich.ch)|2a0a:e5c0:2:2:400:c8ff:fe68:bef3|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 1992 (1.9K) [application/octet-stream] Saving to: ‘SHA256.1’ SHA256.1 100%[====================================================================\u0026gt;] 1.95K --.-KB/s in 0s 2023-01-12 20:47:39 (742 MB/s) - ‘SHA256.1’ saved [1992/1992] # grep install63.iso SHA256 \u0026gt; /tmp/x # sha256sum -c /tmp/x # rm /tmp/x   Before we can start the virtualization server and get running our OpenBSD instance, we need to define the configuraiton on how to virtualize and ultimately boot the system with. This is done with virt-install. Noteworthy here is that we QEMU as our emulation solution of choice, we allocate up to 4GB of RAM and 4 CPU cores to the machine.\n1 2 3 4 5 6 7 8 9 10 11  $ sudo virt-install \\  --name=openbsd \\  --virt-type=qemu \\  --memory=2048,maxmemory=4096 \\  --vcpus=2,maxvcpus=4 \\  --cpu host \\  --os-variant=openbsd7.0 \\  --cdrom=/var/lib/libvirt/boot/install72.iso \\  --network=bridge=virbr0,model=virtio \\  --graphics=vnc \\  --disk path=/var/lib/libvirt/images/openbsd.qcow2,size=40,bus=virtio,format=qcow2   Once, it is up and running, we can use a vnc solution to connect to the running machine. In this case, I chose virsh to do the job. virsh is a command-line interface tool for managing virtualization environments created with libvirt. It allows us to manage virtual machines, storage pools, and network interfaces, as well as other virtualization components, from the command line.\nTo establish a VNC connection with a running libvirt virtualized OpenBSD instance, you can use the following steps:\n Start the virtual machine in libvirt: You can start the virtual machine using the virsh command virsh start \u0026lt;vm-name\u0026gt;, where \u0026lt;vm-name\u0026gt; is the name of the virtual machine you want to start. Find the VNC display: Once the virtual machine is running, you can find the VNC display number for the virtual machine using the virsh command virsh vncdisplay \u0026lt;vm-name\u0026gt;. Connect to the VNC display: You can connect to the VNC display using a VNC client, such as vncviewer, and specify the IP address of the host running the virtual machine and the VNC display number. For example, if the host\u0026rsquo;s IP address is 192.168.0.100 and the VNC display number is :0, the command to connect would be vncviewer 192.168.0.100:0. Authenticate to the VNC server: You may need to enter a password to authenticate to the VNC server. The password is set when the virtual machine is created in libvirt.  With these steps, you can establish a VNC connection with a running libvirt virtualized OpenBSD instance and interact with the virtual machine\u0026rsquo;s graphical user interface.\n1 2  $ virsh dumpxml openbsd | grep vnc \u0026lt;graphics type=\u0026#39;vnc\u0026#39; port=\u0026#39;5900\u0026#39; autoport=\u0026#39;yes\u0026#39; listen=\u0026#39;127.0.0.1\u0026#39;\u0026gt;   Like I did, most of you would like to interact with a graphical interface such as with X11. For that, we yet another tool, a so-called VNC viewer. A very simple implementation of such a vnc viewer is tigervnc (simply install it with $ sudo xbps-install -S tigervnc).\n1 2 3  $ sudo virsh --connect qemu:///system start openbsd Domain \u0026#39;openbsd\u0026#39; started   {tbc}\n","date":"Feb 06","permalink":"https://raskell.io/articles/my-openbsd-journey-getting-it-virtualized-with-libvirt-1/","tags":["openbsd, virtualization"],"title":"My OpenBSD journey: Getting it virtualized with libvirt (1)"},{"categories":["themes","syntax"],"contents":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n   Headings  The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\n   H1     H2     H3     H4     H5     H6     Paragraph  Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n   Blockquotes  The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\n   Blockquote without attribution   Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n    Blockquote with attribution   Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n    Tables  Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23       Inline Markdown within tables     Italics Bold Code     italics bold code       Code Blocks     Code block with backticks  1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;      Code block indented with four spaces  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;     Code block with Hugo\u0026rsquo;s internal highlight shortcode  1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;      List Types     Ordered List   First item Second item Third item     Unordered List   List item Another item And another item     Nested list   Fruit  Apple Orange Banana   Dairy  Milk Cheese       Other Elements — abbr, sub, sup, kbd, mark  GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"Mar 11","permalink":"https://raskell.io/markdown-syntax/","tags":["markdown","css","html"],"title":"Markdown Syntax Guide"},{"categories":["meta"],"contents":"   Hello world  Welcome to my tech blog! My name is Raffael Schneider and I am excited to share my rumings about the state of tech, open-source, and the life as a software developer with you.\nIn this first post, I wanted to introduce myself and explain what you can expect to find on this blog. I have been working in the tech industry for several years, and I have experience with a variety of technologies, programming languages, and operating systems. I have a strong interest in open-source software and the principles of open collaboration and sharing that underpin it. Also, I have a passion for tech hardware and the funtional restoration of discarded equipment. The freedom to express oneself with technology to make the world a more comfortable place is a strong focus of mine.\n   Outlook  On this blog, I will be covering a wide range of topics related to technology in general, open-source, operating systems, programming, and tech hardware. Some of the things you can expect to find include:\n My dabblings into new and bleeding-edge technologies in general My experience in using Linux, BSDs, and embedded operating systems Exploration of new and exciting open-source projects Discussion of the latest technology trends and innovations Personal musings and insights into the tech industry  I believe that technology has the power to change the world, and I am excited to be a small part of that change. I hope that this blog will serve as a valuable resource for anyone interested in technology, open-source, Linux, OpenBSD, and programming. I will be posting new content on a regular basis, so be sure to check back often.\nIn my next post, I will dive into a specific topic and share my knowledge and experience. I want to make sure that my readers will learn something new every time they visit my blog.\nThank you for visiting, and I look forward to connecting with you on social media or in real life.\n","date":"Jan 11","permalink":"https://raskell.io/articles/hello-and-outlook/","tags":["raskell"],"title":"Hello and outlook"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://raskell.io/articles/","tags":null,"title":"Articles"}]